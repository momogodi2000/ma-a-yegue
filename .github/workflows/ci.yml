name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.19.0'
  JAVA_VERSION: '17'

jobs:
  # Code Quality and Analysis
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Analyze project source
      run: flutter analyze --fatal-infos

    - name: Check for outdated dependencies
      run: flutter pub outdated

  # Unit and Widget Tests
  test:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    needs: analyze

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Run unit tests
      run: flutter test --coverage --test-randomize-ordering-seed random

    - name: Generate coverage report
      run: |
        dart pub global activate coverage
        dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.dart_tool/package_config.json --report-on=lib

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        fail_ci_if_error: true

  # Integration Tests
  integration_test:
    name: Integration Tests
    runs-on: macos-latest
    needs: test

    strategy:
      matrix:
        device:
          - "iPhone 15"
          - "iPad Pro (12.9-inch) (6th generation)"
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Start iOS Simulator
      run: |
        xcrun simctl boot "${{ matrix.device }}" || true
        xcrun simctl list devices

    - name: Run integration tests
      run: flutter test integration_test/ --device-id="${{ matrix.device }}"
      timeout-minutes: 30

  # Android Build Test
  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Build APK
      run: flutter build apk --debug

    - name: Build App Bundle
      run: flutter build appbundle --debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: build/app/outputs/flutter-apk/app-debug.apk
        retention-days: 7

  # iOS Build Test
  build_ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Build iOS (no codesign)
      run: flutter build ios --debug --no-codesign

    - name: Archive iOS app
      run: |
        cd build/ios/iphoneos
        tar -czf ios-debug-app.tar.gz Runner.app

    - name: Upload iOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: debug-ios
        path: build/ios/iphoneos/ios-debug-app.tar.gz
        retention-days: 7

  # Web Build Test
  build_web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Build Web
      run: flutter build web --debug

    - name: Upload Web artifact
      uses: actions/upload-artifact@v4
      with:
        name: debug-web
        path: build/web/
        retention-days: 7

  # Security Scan
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: analyze

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Run security audit
      run: dart pub deps --style=compact

    - name: Check for known vulnerabilities
      run: |
        dart pub global activate pana
        dart pub global run pana --no-warning --json | jq '.suggestions[] | select(.level == "error")'
      continue-on-error: true

  # Performance Tests
  performance_test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Build profile APK
      run: flutter build apk --profile

    - name: Analyze bundle size
      run: |
        APK_SIZE=$(stat -c%s build/app/outputs/flutter-apk/app-profile.apk)
        echo "APK Size: $((APK_SIZE / 1024 / 1024)) MB"
        if [ $APK_SIZE -gt 52428800 ]; then  # 50MB
          echo "Warning: APK size exceeds 50MB"
          exit 1
        fi

  # Deployment (Production only)
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build_android, build_ios, build_web, security_scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Setup Firebase CLI
      run: |
        npm install -g firebase-tools

    - name: Install dependencies
      run: flutter pub get

    - name: Build for production
      run: |
        flutter build appbundle --release
        flutter build web --release

    - name: Deploy to Firebase
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        firebase use production --token $FIREBASE_TOKEN
        firebase deploy --only hosting,firestore:rules,storage:rules --token $FIREBASE_TOKEN

    - name: Notify deployment
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        echo "📱 Android App Bundle: build/app/outputs/bundle/release/app-release.aab"
        echo "🌐 Web app deployed to Firebase Hosting"

  # Deployment (Staging)
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build_android, build_web]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Setup Firebase CLI
      run: npm install -g firebase-tools

    - name: Install dependencies
      run: flutter pub get

    - name: Build for staging
      run: |
        flutter build apk --debug
        flutter build web --debug

    - name: Deploy to Firebase Staging
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        firebase use staging --token $FIREBASE_TOKEN
        firebase deploy --only hosting --token $FIREBASE_TOKEN

    - name: Notify staging deployment
      if: success()
      run: echo "🚀 Staging deployment successful!"

  # Release Notes Generation
  release_notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy_production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog

    - name: Generate changelog
      run: |
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md
        echo "## 📋 Changes in this release:" >> RELEASE_NOTES.md
        cat CHANGELOG.md >> RELEASE_NOTES.md

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false