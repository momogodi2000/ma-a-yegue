import 'package:dartz/dartz.dart';
import '../../../../core/errors/failures.dart';
import '../../../../core/usecases/usecase.dart';
import '../entities/word_entity.dart';
import '../repositories/dictionary_repository.dart';

class TeacherAddWordUsecase implements UseCase<WordEntity, TeacherAddWordParams> {
  final DictionaryRepository repository;

  TeacherAddWordUsecase(this.repository);

  @override
  Future<Either<Failure, WordEntity>> call(TeacherAddWordParams params) async {
    try {
      // Validate teacher permissions
      if (!params.isTeacherOrAdmin) {
        return const Left(AuthFailure('Insufficient permissions to add words'));
      }

      // Validate word data
      if (params.canonicalForm.trim().isEmpty) {
        return const Left(ValidationFailure('Word cannot be empty'));
      }

      if (!_isValidLanguageCode(params.languageCode)) {
        return const Left(ValidationFailure('Invalid language code'));
      }

      // Create word entity with teacher metadata
      final wordEntity = WordEntity(
        id: '', // Will be generated by repository
        word: params.canonicalForm.trim(),
        language: params.languageCode,
        translation: params.translations.isNotEmpty ? params.translations.values.first : '', // Take first translation
        category: params.partOfSpeech ?? 'noun',
        difficulty: params.difficulty,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        pronunciation: params.pronunciation,
        phonetic: params.phonetic,
        definition: params.definition,
        example: params.examples.isNotEmpty ? params.examples.first : null, // Take first example
        audioUrl: params.audioUrl,
      );

      // Add to repository (local first, then sync)
      final result = await repository.addWord(wordEntity);
      return result;
    } catch (e) {
      return Left(ServerFailure('Failed to add word: ${e.toString()}'));
    }
  }

  bool _isValidLanguageCode(String languageCode) {
    const validCodes = ['ewondo', 'duala', 'bafang', 'fulfulde', 'bassa', 'bamum', 'fr', 'en'];
    return validCodes.contains(languageCode.toLowerCase());
  }
}

class TeacherAddWordParams {
  final String canonicalForm;
  final String languageCode;
  final Map<String, String> translations;
  final String? pronunciation;
  final String? phonetic;
  final String? partOfSpeech;
  final String? definition;
  final List<String> examples;
  final int difficulty;
  final String contributorId;
  final bool isTeacherOrAdmin;
  final bool autoApprove;
  final List<String> tags;
  final String? audioUrl;
  final double qualityScore;

  TeacherAddWordParams({
    required this.canonicalForm,
    required this.languageCode,
    required this.translations,
    this.pronunciation,
    this.phonetic,
    this.partOfSpeech,
    this.definition,
    this.examples = const [],
    required this.difficulty,
    required this.contributorId,
    required this.isTeacherOrAdmin,
    this.autoApprove = false,
    this.tags = const [],
    this.audioUrl,
    this.qualityScore = 1.0,
  });
}