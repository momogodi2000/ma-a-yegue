import 'package:flutter/material.dart';
import 'package:maa_yegue/core/constants/supported_languages.dart';
import 'package:maa_yegue/features/lessons/domain/entities/course.dart';
import 'package:maa_yegue/features/lessons/data/services/course_service.dart';

/// View for creating new courses
class CourseCreationView extends StatefulWidget {
  const CourseCreationView({Key? key}) : super(key: key);

  @override
  State<CourseCreationView> createState() => _CourseCreationViewState();
}

class _CourseCreationViewState extends State<CourseCreationView> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _objectivesController = TextEditingController();

  String _selectedLanguage = 'ewondo';
  String _selectedDifficulty = 'beginner';
  bool _isPublished = false;
  bool _isLoading = false;

  final List<String> _difficulties = ['beginner', 'intermediate', 'advanced'];

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _objectivesController.dispose();
    super.dispose();
  }

  Future<void> _createCourse() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      // Create course entity
      final course = Course(
        id: '', // Will be generated by service
        title: _titleController.text.trim(),
        description: _descriptionController.text.trim(),
        languageCode: _selectedLanguage,
        thumbnailUrl: '', // TODO: Add image picker
        lessons: [], // Empty initially
        estimatedDuration: 60, // Default 1 hour in minutes
        level: CourseLevel.values.firstWhere(
          (level) => level.name == _selectedDifficulty,
          orElse: () => CourseLevel.beginner,
        ),
        status: _isPublished ? CourseStatus.published : CourseStatus.draft,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // Create course using service
      final courseService = CourseService();
      final courseId = await courseService.createCourse(course);

      // Show success message
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Course created successfully!'),
            backgroundColor: Colors.green,
          ),
        );

        // Navigate back
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to create course: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create New Course'),
        actions: [
          TextButton(
            onPressed: _isLoading ? null : _createCourse,
            child: Text(
              'CREATE',
              style: TextStyle(
                color: _isLoading ? Colors.grey : Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Course thumbnail placeholder
                    _buildThumbnailSection(),

                    const SizedBox(height: 24),

                    // Basic Information
                    _buildSectionTitle('Basic Information'),
                    const SizedBox(height: 16),

                    // Title
                    TextFormField(
                      controller: _titleController,
                      decoration: const InputDecoration(
                        labelText: 'Course Title *',
                        hintText: 'Enter an engaging course title',
                        border: OutlineInputBorder(),
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Course title is required';
                        }
                        if (value.length < 5) {
                          return 'Title must be at least 5 characters';
                        }
                        return null;
                      },
                    ),

                    const SizedBox(height: 16),

                    // Description
                    TextFormField(
                      controller: _descriptionController,
                      maxLines: 3,
                      decoration: const InputDecoration(
                        labelText: 'Description *',
                        hintText: 'Describe what students will learn in this course',
                        border: OutlineInputBorder(),
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Course description is required';
                        }
                        if (value.length < 20) {
                          return 'Description must be at least 20 characters';
                        }
                        return null;
                      },
                    ),

                    const SizedBox(height: 24),

                    // Course Settings
                    _buildSectionTitle('Course Settings'),
                    const SizedBox(height: 16),

                    // Language selection
                    DropdownButtonFormField<String>(
                      value: _selectedLanguage,
                      decoration: const InputDecoration(
                        labelText: 'Language *',
                        border: OutlineInputBorder(),
                      ),
                      items: SupportedLanguages.languages.values.map((language) {
                        return DropdownMenuItem(
                          value: language.code,
                          child: Text(language.name),
                        );
                      }).toList(),
                      onChanged: (value) {
                        setState(() => _selectedLanguage = value!);
                      },
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please select a language';
                        }
                        return null;
                      },
                    ),

                    const SizedBox(height: 16),

                    // Difficulty level
                    DropdownButtonFormField<String>(
                      value: _selectedDifficulty,
                      decoration: const InputDecoration(
                        labelText: 'Difficulty Level *',
                        border: OutlineInputBorder(),
                      ),
                      items: _difficulties.map((difficulty) {
                        return DropdownMenuItem(
                          value: difficulty,
                          child: Text(
                            difficulty[0].toUpperCase() + difficulty.substring(1),
                          ),
                        );
                      }).toList(),
                      onChanged: (value) {
                        setState(() => _selectedDifficulty = value!);
                      },
                    ),

                    const SizedBox(height: 24),

                    // Publication Settings
                    _buildSectionTitle('Publication Settings'),
                    const SizedBox(height: 16),

                    SwitchListTile(
                      title: const Text('Publish Course'),
                      subtitle: const Text(
                        'Make this course visible to students. You can always change this later.',
                      ),
                      value: _isPublished,
                      onChanged: (value) {
                        setState(() => _isPublished = value);
                      },
                    ),

                    const SizedBox(height: 32),

                    // Create button
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _createCourse,
                        style: ElevatedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: const Text(
                          'Create Course',
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                      ),
                    ),

                    const SizedBox(height: 16),
                  ],
                ),
              ),
            ),
    );
  }

  Widget _buildThumbnailSection() {
    return Container(
      height: 200,
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.grey[200],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.image,
            size: 48,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 8),
          Text(
            'Course Thumbnail',
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 16,
            ),
          ),
          const SizedBox(height: 8),
          ElevatedButton.icon(
            onPressed: () {
              // TODO: Implement image picker
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Image picker - Coming soon!')),
              );
            },
            icon: const Icon(Icons.upload),
            label: const Text('Upload Image'),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: const TextStyle(
        fontSize: 18,
        fontWeight: FontWeight.bold,
        color: Colors.black87,
      ),
    );
  }
}
