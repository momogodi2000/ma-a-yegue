import 'package:flutter/material.dart';
import 'package:maa_yegue/features/lessons/domain/entities/course.dart';
import 'package:maa_yegue/features/lessons/domain/entities/lesson.dart';
import 'package:maa_yegue/features/lessons/domain/entities/lesson_content.dart';
import 'package:maa_yegue/features/lessons/data/services/course_service.dart';

/// View for creating new lessons within a course
class LessonCreationView extends StatefulWidget {
  final Course course;

  const LessonCreationView({Key? key, required this.course}) : super(key: key);

  @override
  State<LessonCreationView> createState() => _LessonCreationViewState();
}

class _LessonCreationViewState extends State<LessonCreationView> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _contentController = TextEditingController();

  String _selectedContentType = 'text';
  int _order = 1;
  bool _isLoading = false;

  final List<String> _contentTypes = [
    'text',
    'video',
    'audio',
    'image',
    'quiz',
  ];

  @override
  void initState() {
    super.initState();
    // Set default order to next lesson number
    _order = widget.course.lessons.length + 1;
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _contentController.dispose();
    super.dispose();
  }

  Future<void> _createLesson() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      // Create lesson entity
      final lesson = Lesson(
        id: '', // Will be generated by service
        courseId: widget.course.id,
        title: _titleController.text.trim(),
        description: _descriptionController.text.trim(),
        order: _order,
        type:
            LessonType.vocabulary, // Default type, TODO: Map from content type
        status: LessonStatus.available,
        estimatedDuration: 15, // Default 15 minutes
        thumbnailUrl: '', // TODO: Add thumbnail upload
        contents: [
          LessonContent(
            id: '', // Will be generated
            lessonId: '', // Will be set after lesson creation
            type: ContentType.values.firstWhere(
              (type) => type.name == _selectedContentType,
              orElse: () => ContentType.text,
            ),
            content: _contentController.text.trim(),
            order: 1,
            createdAt: DateTime.now(),
            updatedAt: DateTime.now(),
          ),
        ],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // Create lesson using service
      final courseService = CourseService();
      final lessonId = await courseService.createLesson(lesson);

      // Show success message
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Lesson created successfully with ID: $lessonId'),
            backgroundColor: Colors.green,
          ),
        );

        // Navigate back
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to create lesson: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Lesson to ${widget.course.title}'),
        actions: [
          TextButton(
            onPressed: _isLoading ? null : _createLesson,
            child: Text(
              'CREATE',
              style: TextStyle(
                color: _isLoading ? Colors.grey : Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Lesson Information
                    _buildSectionTitle('Lesson Information'),
                    const SizedBox(height: 16),

                    // Title
                    TextFormField(
                      controller: _titleController,
                      decoration: const InputDecoration(
                        labelText: 'Lesson Title *',
                        hintText: 'Enter an engaging lesson title',
                        border: OutlineInputBorder(),
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Lesson title is required';
                        }
                        if (value.length < 3) {
                          return 'Title must be at least 3 characters';
                        }
                        return null;
                      },
                    ),

                    const SizedBox(height: 16),

                    // Description
                    TextFormField(
                      controller: _descriptionController,
                      maxLines: 2,
                      decoration: const InputDecoration(
                        labelText: 'Description *',
                        hintText:
                            'Brief description of what students will learn',
                        border: OutlineInputBorder(),
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Lesson description is required';
                        }
                        return null;
                      },
                    ),

                    const SizedBox(height: 24),

                    // Content Settings
                    _buildSectionTitle('Content Settings'),
                    const SizedBox(height: 16),

                    // Content Type
                    DropdownButtonFormField<String>(
                      value: _selectedContentType,
                      decoration: const InputDecoration(
                        labelText: 'Content Type *',
                        border: OutlineInputBorder(),
                      ),
                      items: _contentTypes.map((type) {
                        return DropdownMenuItem(
                          value: type,
                          child: Text(
                            type[0].toUpperCase() + type.substring(1),
                          ),
                        );
                      }).toList(),
                      onChanged: (value) {
                        setState(() => _selectedContentType = value!);
                      },
                    ),

                    const SizedBox(height: 16),

                    // Order
                    TextFormField(
                      initialValue: _order.toString(),
                      decoration: const InputDecoration(
                        labelText: 'Lesson Order *',
                        hintText: 'Position in the course (1, 2, 3, etc.)',
                        border: OutlineInputBorder(),
                      ),
                      keyboardType: TextInputType.number,
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Lesson order is required';
                        }
                        final order = int.tryParse(value);
                        if (order == null || order < 1) {
                          return 'Order must be a positive number';
                        }
                        return null;
                      },
                      onChanged: (value) {
                        final order = int.tryParse(value);
                        if (order != null && order > 0) {
                          setState(() => _order = order);
                        }
                      },
                    ),

                    const SizedBox(height: 24),

                    // Content
                    _buildSectionTitle('Lesson Content'),
                    const SizedBox(height: 16),

                    TextFormField(
                      controller: _contentController,
                      maxLines: 8,
                      decoration: InputDecoration(
                        labelText: 'Content *',
                        hintText: _getContentHint(),
                        border: const OutlineInputBorder(),
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Lesson content is required';
                        }
                        return null;
                      },
                    ),

                    const SizedBox(height: 16),

                    // Content preview/upload section
                    _buildContentPreviewSection(),

                    const SizedBox(height: 32),

                    // Create button
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _createLesson,
                        style: ElevatedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: const Text(
                          'Create Lesson',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),

                    const SizedBox(height: 16),
                  ],
                ),
              ),
            ),
    );
  }

  String _getContentHint() {
    switch (_selectedContentType) {
      case 'text':
        return 'Enter the lesson text content here...';
      case 'video':
        return 'Enter video URL or embed code...';
      case 'audio':
        return 'Enter audio URL or file path...';
      case 'image':
        return 'Enter image URL or description...';
      case 'quiz':
        return 'Quiz content will be configured separately...';
      default:
        return 'Enter lesson content...';
    }
  }

  Widget _buildContentPreviewSection() {
    return Container(
      height: 120,
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(_getContentTypeIcon(), size: 32, color: Colors.grey[600]),
          const SizedBox(height: 8),
          Text(
            _getContentTypeLabel(),
            style: TextStyle(
              color: Colors.grey[700],
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(height: 8),
          ElevatedButton.icon(
            onPressed: () {
              // TODO: Implement content upload/preview
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Content upload - Coming soon!')),
              );
            },
            icon: const Icon(Icons.upload, size: 16),
            label: const Text('Upload Content'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.white,
              foregroundColor: Colors.black87,
              elevation: 0,
              side: const BorderSide(color: Colors.grey),
            ),
          ),
        ],
      ),
    );
  }

  IconData _getContentTypeIcon() {
    switch (_selectedContentType) {
      case 'text':
        return Icons.text_fields;
      case 'video':
        return Icons.video_library;
      case 'audio':
        return Icons.audiotrack;
      case 'image':
        return Icons.image;
      case 'quiz':
        return Icons.quiz;
      default:
        return Icons.content_copy;
    }
  }

  String _getContentTypeLabel() {
    switch (_selectedContentType) {
      case 'text':
        return 'Text Content';
      case 'video':
        return 'Video Content';
      case 'audio':
        return 'Audio Content';
      case 'image':
        return 'Image Content';
      case 'quiz':
        return 'Quiz Content';
      default:
        return 'Content';
    }
  }

  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: const TextStyle(
        fontSize: 18,
        fontWeight: FontWeight.bold,
        color: Colors.black87,
      ),
    );
  }
}
