// Mocks generated by Mockito 5.4.5 from annotations
// in maa_yegue/test/features/authentication/presentation/viewmodels/auth_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i3;
import 'package:maa_yegue/core/errors/failures.dart' as _i8;
import 'package:maa_yegue/core/usecases/usecase.dart' as _i15;
import 'package:maa_yegue/features/authentication/domain/entities/auth_response_entity.dart'
    as _i5;
import 'package:maa_yegue/features/authentication/domain/entities/user_entity.dart'
    as _i13;
import 'package:maa_yegue/features/authentication/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:maa_yegue/features/authentication/domain/usecases/apple_sign_in_usecase.dart'
    as _i17;
import 'package:maa_yegue/features/authentication/domain/usecases/facebook_sign_in_usecase.dart'
    as _i16;
import 'package:maa_yegue/features/authentication/domain/usecases/forgot_password_usecase.dart'
    as _i18;
import 'package:maa_yegue/features/authentication/domain/usecases/get_current_user_usecase.dart'
    as _i12;
import 'package:maa_yegue/features/authentication/domain/usecases/google_sign_in_usecase.dart'
    as _i14;
import 'package:maa_yegue/features/authentication/domain/usecases/login_usecase.dart'
    as _i6;
import 'package:maa_yegue/features/authentication/domain/usecases/logout_usecase.dart'
    as _i10;
import 'package:maa_yegue/features/authentication/domain/usecases/register_usecase.dart'
    as _i9;
import 'package:maa_yegue/features/authentication/domain/usecases/reset_password_usecase.dart'
    as _i11;
import 'package:maa_yegue/features/authentication/domain/usecases/sign_in_with_phone_number_usecase.dart'
    as _i20;
import 'package:maa_yegue/features/authentication/domain/usecases/verify_phone_number_usecase.dart'
    as _i21;
import 'package:maa_yegue/features/onboarding/domain/repositories/onboarding_repository.dart'
    as _i4;
import 'package:maa_yegue/features/onboarding/domain/usecases/get_onboarding_status_usecase.dart'
    as _i19;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOnboardingRepository_2 extends _i1.SmartFake
    implements _i4.OnboardingRepository {
  _FakeOnboardingRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthResponseEntity_3 extends _i1.SmartFake
    implements _i5.AuthResponseEntity {
  _FakeAuthResponseEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUsecase extends _i1.Mock implements _i6.LoginUsecase {
  MockLoginUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>> call(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>.value(
                _FakeEither_1<_i8.Failure, _i5.AuthResponseEntity>(
          this,
          Invocation.method(
            #call,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>);
}

/// A class which mocks [RegisterUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUsecase extends _i1.Mock implements _i9.RegisterUsecase {
  MockRegisterUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>> call(
    String? email,
    String? password,
    String? displayName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            password,
            displayName,
          ],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>.value(
                _FakeEither_1<_i8.Failure, _i5.AuthResponseEntity>(
          this,
          Invocation.method(
            #call,
            [
              email,
              password,
              displayName,
            ],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>);
}

/// A class which mocks [LogoutUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUsecase extends _i1.Mock implements _i10.LogoutUsecase {
  MockLogoutUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, void>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, void>>.value(
            _FakeEither_1<_i8.Failure, void>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, void>>);
}

/// A class which mocks [ResetPasswordUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetPasswordUsecase extends _i1.Mock
    implements _i11.ResetPasswordUsecase {
  MockResetPasswordUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, void>> call(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [email],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, void>>.value(
            _FakeEither_1<_i8.Failure, void>(
          this,
          Invocation.method(
            #call,
            [email],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, void>>);
}

/// A class which mocks [GetCurrentUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentUserUsecase extends _i1.Mock
    implements _i12.GetCurrentUserUsecase {
  MockGetCurrentUserUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i13.UserEntity?>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i13.UserEntity?>>.value(
                _FakeEither_1<_i8.Failure, _i13.UserEntity?>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i13.UserEntity?>>);
}

/// A class which mocks [GoogleSignInUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInUsecase extends _i1.Mock
    implements _i14.GoogleSignInUsecase {
  MockGoogleSignInUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>> call(
          _i15.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>.value(
                _FakeEither_1<_i8.Failure, _i5.AuthResponseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>);
}

/// A class which mocks [FacebookSignInUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFacebookSignInUsecase extends _i1.Mock
    implements _i16.FacebookSignInUsecase {
  MockFacebookSignInUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>> call(
          _i15.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>.value(
                _FakeEither_1<_i8.Failure, _i5.AuthResponseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>);
}

/// A class which mocks [AppleSignInUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppleSignInUsecase extends _i1.Mock
    implements _i17.AppleSignInUsecase {
  MockAppleSignInUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>> call(
          _i15.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>.value(
                _FakeEither_1<_i8.Failure, _i5.AuthResponseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i5.AuthResponseEntity>>);
}

/// A class which mocks [ForgotPasswordUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgotPasswordUsecase extends _i1.Mock
    implements _i18.ForgotPasswordUsecase {
  MockForgotPasswordUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, void>> call(
          _i18.ForgotPasswordParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, void>>.value(
            _FakeEither_1<_i8.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, void>>);
}

/// A class which mocks [GetOnboardingStatusUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOnboardingStatusUsecase extends _i1.Mock
    implements _i19.GetOnboardingStatusUsecase {
  MockGetOnboardingStatusUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.OnboardingRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeOnboardingRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.OnboardingRepository);

  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> call(_i15.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_1<_i8.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, bool>>);
}

/// A class which mocks [SignInWithPhoneNumberUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithPhoneNumberUsecase extends _i1.Mock
    implements _i20.SignInWithPhoneNumberUsecase {
  MockSignInWithPhoneNumberUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i5.AuthResponseEntity> call(String? phoneNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [phoneNumber],
        ),
        returnValue:
            _i7.Future<_i5.AuthResponseEntity>.value(_FakeAuthResponseEntity_3(
          this,
          Invocation.method(
            #call,
            [phoneNumber],
          ),
        )),
      ) as _i7.Future<_i5.AuthResponseEntity>);
}

/// A class which mocks [VerifyPhoneNumberUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyPhoneNumberUsecase extends _i1.Mock
    implements _i21.VerifyPhoneNumberUsecase {
  MockVerifyPhoneNumberUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i7.Future<_i5.AuthResponseEntity> call(
    String? verificationId,
    String? smsCode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            verificationId,
            smsCode,
          ],
        ),
        returnValue:
            _i7.Future<_i5.AuthResponseEntity>.value(_FakeAuthResponseEntity_3(
          this,
          Invocation.method(
            #call,
            [
              verificationId,
              smsCode,
            ],
          ),
        )),
      ) as _i7.Future<_i5.AuthResponseEntity>);
}
